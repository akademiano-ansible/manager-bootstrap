---
- name: Configure ansible manager
  hosts: 127.0.0.1
  connection: local
  vars:
    ansible_group: ansible-managers
    ansible_first_manager: root
    ansible_directory: /opt/ansible

    ansible_lib_repo: "git@github.com:akademiano-ansible/ansible-app.git"
    ansible_lib_name: akademiano
    ansible_local_repo:
    ansible_dirmode: "u=rwX,g=srwX,o="
    ansible_filemode: "u=rwX,g=rwX,o="

    ansible_other_libs:
      - repo: git@github.com:fboender/multi-git-status.git
        name: multi-git-status
        bin:
          - mgitstatus

    vault_password_generated: "{{ lookup('password', '{{ansible_directory}}/data/.ansible_vault_secret  length=16 chars=ascii_letters,digits') }}"
    
  tasks:

    - set_fact:
        ansible_lib_repo: "{{ext_ansible_lib_repo}}"
      when: ext_ansible_lib_repo is defined and ext_ansible_lib_repo | length > 0
    - set_fact:
        ansible_local_repo: "{{ext_ansible_local_repo}}"
      when: ext_ansible_local_repo is defined and ext_ansible_local_repo | length > 0
    - set_fact:
        ansible_first_manager: "{{ext_ansible_first_manager}}"
      when: ext_ansible_first_manager is defined and ext_ansible_first_manager | length > 0

    - set_fact:
        ansible_bin_path: "{{ansible_directory}}/bin"
        ansible_libs_dir: "{{ansible_directory}}/lib"
        ansible_lib_path: "{{ansible_directory}}/lib/{{ansible_lib_name}}"
        ansible_local_path: "{{ansible_directory}}/local"
        ansible_directory_main: "{{ansible_directory}}/main"
        ansible_data_dir: "{{ansible_directory}}/data"
        ansible_config_dir: "{{ansible_directory}}/conf"
      changed_when: false

    - name: create group
      group:
        name: "{{ansible_group}}"
        state: present

    - name: add user to group
      user:
        name: "{{ansible_first_manager}}"
        group: "{{ansible_group}}"
        append: yes

    - name: create directory
      file:
        path: "{{ansible_directory}}"
        owner: "{{ansible_first_manager}}"
        group: "{{ansible_group}}"
        recurse: yes
        mode: "{{ansible_dirmode}}"
        state: directory

    - name: create directorys
      file:
        path: "{{ansible_directory}}/{{item}}"
        owner: "{{ansible_first_manager}}"
        group: "{{ansible_group}}"
        recurse: yes
        mode: "{{ansible_dirmode}}"
        state: directory
      loop:
        - bin
        - lib
        - data
        - data/cache
        - conf
        - local
        - roles
        - work

    - name: check lib repo installed
      find:
        paths: "{{ansible_directory}}/lib/{{ansible_lib_name}}"
        patterns: "*"
      register:  ansible_lib_installed

    - name: clone lib
      git:
        repo: "{{ansible_lib_repo}}"
        dest: "{{ansible_lib_path}}"
        accept_hostkey: yes
        umask: "0007"
      when: ansible_lib_repo is not none and ansible_lib_repo | length > 0 and ansible_lib_installed.matched == 0

    - name: clone other lib repos
      git:
        repo: "{{item.repo}}"
        dest: "{{ansible_libs_dir}}/{{item.name}}"
        accept_hostkey: yes
        umask: "0007"
      loop: "{{ansible_other_libs}}"
      ignore_errors: yes

#    - name: fix libs access

    - name: prepare bin libs
      file:
        path: "{{ansible_libs_dir}}/{{item.0.name}}/{{item.1}}"
        mode: "+rx"
        state: file
      loop: "{{ ansible_other_libs|subelements('bin') }}"

    - name: make link from bin
      file:
        src: "../lib/{{item.0.name}}/{{item.1}}"
        dest: "{{ansible_bin_path}}//{{item.1}}"
        state: link
      loop: "{{ ansible_other_libs|subelements('bin') }}"

    - name: check local lib repo installed
      find:
        paths: "{{ansible_directory}}/local"
        patterns: "*"
      register:  ansible_local_installed

    - name: clone local
      git:
        repo: "{{ansible_local_repo}}"
        dest: "{{ansible_local_path}}"
        accept_hostkey: yes
        umask: "0007"
      when: ansible_local_repo is defined and ansible_local_repo is not none and ansible_local_repo | length > 0 and ansible_local_installed.matched == 0

    - name: create directory | local
      file:
        path: "{{ansible_directory}}/{{item}}"
        owner: "{{ansible_first_manager}}"
        group: "{{ansible_group}}"
        recurse: yes
        mode: "{{ansible_dirmode}}"
        state: directory
      loop:
        - local/inventory
        - local/vars/host_vars
        - local/vars/group_vars
        - local/playbooks
        - local/bin

    - name: create links in local from lib
      file:
        src: "../lib/{{ansible_lib_name}}/{{item}}"
        dest: "{{ansible_local_path}}/{{item}}"
        state: link
      loop:
        - "ansible.cfg"
        - "requirements.yml"
      ignore_errors: yes

    - name: create links in local from lib playbooks
      file:
        src: "../../lib/{{ansible_lib_name}}/playbooks/{{item|basename}}"
        dest: "{{ansible_local_path}}/playbooks/{{item|basename}}"
        state: link
      with_fileglob:
        - "{{ansible_lib_path}}/playbooks/akademiano-*.yml"

    - name: create links in local from lib playbooks
      file:
        src: "../../lib/{{ansible_lib_name}}/inventory/{{item|basename}}"
        dest: "{{ansible_local_path}}/inventory/{{item|basename}}"
        state: link
      with_fileglob:
        - "{{ansible_lib_path}}/inventory/akademiano-*.yml"
        - "{{ansible_lib_path}}/inventory/__akademiano-*.yml"

    - name: create links in local playbooks to vars
      file:
        src: "../vars/{{item}}"
        dest: "{{ansible_local_path}}/playbooks/{{item}}"
        state: link
      loop:
        - host_vars
        - group_vars

    - name: prepare .gitignore
      copy:
        dest: "{{ansible_local_path}}/.gitignore"
        content: |
          roles/
          playbooks/akademiano-*.yml
          playbooks/group_vars
          playbooks/host_vars
          inventory/__akademiano-*.yml
          ansible.cfg
          requirements.yml
        force: no
        mode: "{{ansible_filemode}}"

    - name: create git repo
      command: "git init"
      args:
        creates: "{{ansible_local_path}}/.git"
        chdir: "{{ansible_local_path}}"

    - name: create links in work to local
      file:
        src: "../local/{{item}}"
        dest: "{{ansible_directory}}/work/{{item}}"
        state: link
      loop:
        - ansible.cfg
        - requirements.yml
        - inventory
        - playbooks

    - name: create links from main to work
      file:
        src: "../{{item}}"
        dest: "{{ansible_directory}}/work/{{item}}"
        state: link
      loop:
        - roles

    - name: create links from data to work
      file:
        src: "../data/{{item}}"
        dest: "{{ansible_directory}}/work/{{item}}"
        state: link
      loop:
        - cache

    - set_fact:
        ansible_vault_path: "{{ansible_directory}}/data/.ansible_vault_secret"
      changed_when: false

    - set_fact:
        ansible_vault_secret_value: "{{vault_password_generated}}"
      changed_when: false

    - name: generate ansible vault
      file:
        dest: "{{ansible_vault_path}}"
        owner: "{{ansible_first_manager}}"
        group: "{{ansible_group}}"
        mode: "{{ansible_filemode}}"

    - name: install ansible roles | install
      command: "ansible-galaxy install  --ignore-errors --keep-scm-meta --roles-path {{ansible_directory}}/roles -r {{ansible_directory}}/work/requirements.yml"
      args:
        chdir: "{{ansible_directory}}"

    - name: install ansible roles | chown
      command: "chown -R {{ansible_first_manager}}:{{ansible_group}}  {{ansible_directory}}/roles"
      args:
        chdir: "{{ansible_directory}}"
        warn: false
      changed_when: false

    - name: install ansible roles | chmod
      shell: "chmod {{ansible_dirmode}} $(find {{ansible_directory}}/roles -type d) && chmod {{ansible_filemode}} $(find {{ansible_directory}}/roles -type f)"
      args:
        chdir: "{{ansible_directory}}"
        executable: /bin/bash
        warn: false
      changed_when: false
