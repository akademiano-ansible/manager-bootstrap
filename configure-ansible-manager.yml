---
- name: Configure ansible manager
  hosts: 127.0.0.1
  connection: local
  vars:
    ansible_group: ansible-managers
    ansible_first_manager: root
    ansible_directory: /opt/ansible

    ansible_lib_repo: "git@github.com:akademiano-ansible/ansible-app.git"
    ansible_lib_name: akademiano
    ansible_local_repo:
    ansible_deploy_key_url:
    deploy_key_vault_password:
    ansible_dirmode:  "g+s,u+rwX,g+rwX,o-rwx"
    ansible_filemode:  "u+rwX,g+rwX,o-rwx"

    vault_password_generated: "{{ lookup('password', '{{ansible_directory}}/data/.ansible_vault_secret  length=16 chars=ascii_letters,digits') }}"
    
  tasks:  
    - set_fact:
        ansible_lib_repo: "{{ext_ansible_lib_repo}}"
      when: ext_ansible_lib_repo is defined and ext_ansible_lib_repo | length > 0
    - set_fact:
        ansible_local_repo: "{{ext_ansible_local_repo}}"
      when: ext_ansible_local_repo is defined and ext_ansible_local_repo | length > 0
    - set_fact:
        ansible_deploy_key_url: "{{ext_ansible_deploy_key_url}}"
      when: ext_ansible_deploy_key_url is defined and ext_ansible_deploy_key_url | length > 0
    - set_fact:
        deploy_key_vault_password: "{{ext_deploy_key_vault_password}}"
      when: ext_deploy_key_vault_password is defined and ext_deploy_key_vault_password | length > 0
    - set_fact:
        ansible_first_manager: "{{ext_ansible_first_manager}}"
      when: ext_ansible_first_manager is defined and ext_ansible_first_manager | length > 0

    - name: create group
      group:
        name: "{{ansible_group}}"
        state: present

    - name: add user to group
      user:
        name: "{{ansible_first_manager}}"
        group: "{{ansible_group}}"
        append: yes

    - name: create directory
      file:
        path: "{{ansible_directory}}/{{item}}"
        owner: "{{ansible_first_manager}}"
        group: "{{ansible_group}}"
        recurse: yes
        mode: "{{ansible_dirmode}}"
        state: directory
      loop:
        - lib
        - bin
        - data
        - conf
        - local
        - roles
        - work

    - set_fact:
        ansible_lib_path: "{{ansible_directory}}/lib/{{ansible_lib_name}}"
        ansible_local_path: "{{ansible_directory}}/local"
        ansible_directory_main: "{{ansible_directory}}/main"
        ansible_data_dir: "{{ansible_directory}}/data"
        ansible_config_dir: "{{ansible_directory}}/conf"
        ansible_deploy_key: "{{ansible_directory}}/data/id_deploy_key"
      changed_when: false
    
    - name: deploy key | check exist
      stat:
        path: "{{ansible_deploy_key}}"
      register: deploy_key_check
      
    - name: Install Deploy Key
      block:
        - name: deploy key | ask password
          pause:
            prompt: "Enter deploy key password"
            echo: no
          register: deploy_key_input_password
          when: deploy_key_vault_password  is none or deploy_key_vault_password | length == 0

        - set_fact:
            deploy_key_vault_password: "{{deploy_key_input_password.user_input}}"
      
        - name: deploy key | download
          get_url:
            url: "{{ansible_deploy_key_url}}"
            dest: "{{ansible_deploy_key}}.vault"
          
        - name: deploy key | prepare password
          copy:
            dest: "~/.deploy_key_vault_secret"
            content: |
                {{deploy_key_vault_password}}
            force: yes
            mode: 0600
        
        - name: deploy key | decrypt
          command: "ansible-vault decrypt {{ansible_deploy_key}}.vault --output={{ansible_deploy_key}} --vault-password-file=~/.deploy_key_vault_secret"
          args:
            creates: "{{ansible_deploy_key}}"
        
        - name: deploy key | delete password
          file:
            path: "~/.deploy_key_vault_secret"
            state: absent

        - name: deploy key | set permissions
          file:
            path: "{{ansible_deploy_key}}"
            owner: "{{ansible_first_manager}}"
            group: "{{ansible_group}}"
            state: file
            mode: 0660

        - name: prepare ssh .config  | prepare deploy key config
          copy:
            dest: "{{ansible_config_dir}}/ssh_deploy_key.config"
            content: |
              Host *
                IdentityFile ~/.ssh/id_deploy_key
            force: no
            owner: "{{ansible_first_manager}}"
            group: "{{ansible_group}}"
            mode: 0660

        - name: prepare ssh .config | set permissions to config
          file:
            path: "{{ansible_config_dir}}/ssh_deploy_key.config"
            owner: "{{ansible_first_manager}}"
            group: "{{ansible_group}}"
            state: file
            mode: 0660

        - name: deploy key | check exist second
          stat:
            path: "{{ansible_deploy_key}}"
          register: deploy_key_check_second
      when: not deploy_key_check.stat.exists and ansible_deploy_key_url is not none and ansible_deploy_key_url | length > 0

    - name: Add deploy key to root
      block:
        - name: prepare ssh .config | root | init .ssh dir
          file:
            path: "/root/.ssh"
            owner: root
            group: root
            recurse: yes
            state: directory
            mode: 0600

        - name: prepare ssh .config | root | init config
          file:
            path: "/root/.ssh/config"
            owner: root
            group: root
            state: touch
            mode: 0600

        - name: prepare ssh .config | root | copy for include
          copy:
            src: "{{ansible_config_dir}}/ssh_deploy_key.config"
            dest: "/root/.ssh/ssh_deploy_key.config"
            remote_src: yes

        - name: prepare ssh .config | root | deploy config file permissions
          file:
            path: "/root/.ssh/ssh_deploy_key.config"
            owner: root
            group: root
            state: file
            mode: 0600

        - name: prepare ssh .config | root | copy identity key
          copy:
            src: "{{ansible_deploy_key}}"
            dest: "/root/.ssh/id_deploy_key"
            remote_src: yes

        - name: prepare ssh .config | root | identity key file permissions
          file:
            path: "/root/.ssh/id_deploy_key"
            owner: root
            group: root
            state: file
            mode: 0600

        - name: prepare ssh .config | root | add include for deploy key
          blockinfile:
            path: "/root/.ssh/config"
            block: |
              Include ~/.ssh/ssh_deploy_key.config
          register: exist_root_ssh_deploy_key
        
        - name: prepare ssh .config  | disable host keys checking
          lineinfile:
            path: "/root/.ssh/ssh_deploy_key.config"
            insertafter: "^Host /*$"
            line: "StrictHostKeyChecking no"
          changed_when: false
          register: disable_host_keys_checking
      when: (deploy_key_check is defined and deploy_key_check.stat.exists) or (deploy_key_check_second is defined and deploy_key_check_second.stat.exists)

    - name: create bin directory
      file:
        path: "{{ansible_directory}}/bin"
        owner: "{{ansible_first_manager}}"
        group: "{{ansible_group}}"
        recurse: yes
        mode: "{{ansible_dirmode}}"

    - name: check lib repo installed
      find:
        paths: "{{ansible_directory}}/lib/{{ansible_lib_name}}"
        patterns: "*"
      register:  ansible_lib_installed

    - name: clone lib
      git:
        repo: "{{ansible_lib_repo}}"
        dest: "{{ansible_lib_path}}"
        accept_hostkey: yes
        key_file: "{{ansible_deploy_key}}"
      when: ansible_lib_repo is not none and ansible_lib_repo | length > 0 and ansible_lib_installed.matched == 0

    - name: check local lib repo installed
      find:
        paths: "{{ansible_directory}}/local"
        patterns: "*"
      register:  ansible_local_installed

    - name: clone local
      git:
        repo: "{{ansible_local_repo}}"
        dest: "{{ansible_local_path}}"
        accept_hostkey: yes
      when: ansible_local_repo is not none and ansible_local_repo | length > 0 and local_deploy_key is not none and local_deploy_key | length > 0 and ansible_local_installed.matched == 0

    - name: create directory | local
      file:
        path: "{{ansible_directory}}/{{item}}"
        owner: "{{ansible_first_manager}}"
        group: "{{ansible_group}}"
        recurse: yes
        mode: "{{ansible_dirmode}}"
        state: directory
      loop:
        - local/inventory
        - local/vars/host_vars
        - local/vars/group_vars
        - local/playbooks

    - name: create links in local from lib
      file:
        src: "../lib/{{ansible_lib_name}}/{{item}}"
        dest: "{{ansible_local_path}}/{{item}}"
        state: link
      loop:
        - "ansible.cfg"
        - "requirements.yml"

    - name: create links in local from lib playbooks
      file:
        src: "../../lib/{{ansible_lib_name}}/playbooks/{{item|basename}}"
        dest: "{{ansible_local_path}}/playbooks/{{item|basename}}"
        state: link
      with_fileglob:
        - "{{ansible_lib_path}}/playbooks/akademiano-*.yml"

    - name: create links in local from lib playbooks
      file:
        src: "../../lib/{{ansible_lib_name}}/inventory/{{item|basename}}"
        dest: "{{ansible_local_path}}/inventory/{{item|basename}}"
        state: link
      with_fileglob:
        - "{{ansible_lib_path}}/inventory/akademiano-*.yml"
        - "{{ansible_lib_path}}/inventory/__akademiano-*.yml"

    - name: create links in local playbooks to vars
      file:
        src: "../vars/{{item}}"
        dest: "{{ansible_local_path}}/playbooks/{{item}}"
        state: link
      loop:
        - host_vars
        - group_vars

    - name: prepare .gitignore
      copy:
        dest: "{{ansible_local_path}}/.gitignore"
        content: |
          roles/
          playbooks/akademiano-*.yml
          playbooks/group_vars
          playbooks/host_vars
          inventory/__akademiano-*.yml
          ansible.cfg
          requirements.yml
        force: no
        mode: "{{ansible_filemode}}"

    - name: create git repo
      command: "git init"
      args:
        creates: "{{ansible_local_path}}/.git"
        chdir: "{{ansible_local_path}}"

    - name: create links in work to local
      file:
        src: "../local/{{item}}"
        dest: "{{ansible_directory}}/work/{{item}}"
        state: link
      loop:
        - ansible.cfg
        - requirements.yml
        - inventory
        - playbooks

    - name: create links from main to work
      file:
        src: "../{{item}}"
        dest: "{{ansible_directory}}/work/{{item}}"
        state: link
      loop:
        - roles

    - set_fact:
        ansible_vault_path: "{{ansible_directory}}/data/.ansible_vault_secret"
      changed_when: false

    - set_fact:
        ansible_vault_secret_value: "{{vault_password_generated}}"
      changed_when: false

    - name: generate ansible vault
      file:
        dest: "{{ansible_vault_path}}"
        owner: "{{ansible_first_manager}}"
        group: "{{ansible_group}}"
        mode: "{{ansible_filemode}}"

    - name: install ansible roles | install
      command: "ansible-galaxy install  --ignore-errors --keep-scm-meta --roles-path {{ansible_directory}}/roles -r {{ansible_directory}}/work/requirements.yml"
      args:
        chdir: "{{ansible_directory}}"

    - name: install ansible roles | chown
      command: "chown -R {{ansible_first_manager}}:{{ansible_group}}  {{ansible_directory}}/roles"
      args:
        chdir: "{{ansible_directory}}"

    - name: install ansible roles | chmod
      command: "chmod -R {{ansible_dirmode}} {{ansible_directory}}/roles"
      args:
        chdir: "{{ansible_directory}}"
        
    - name: prepare ssh .config  | enable host keys checking
      lineinfile:
        path: "/root/.ssh/ssh_deploy_key.config"
        insertafter: "^Host /*$"
        line: "StrictHostKeyChecking no"
        state: absent
      when: disable_host_keys_checking is defined
      changed_when: false

    - name: prepare ssh .config | root | rm include for deploy key
      blockinfile:
        path: "/root/.ssh/config"
        block: |
          Include ssh_deploy_key.config
        state: absent
      when: exist_root_ssh_deploy_key is defined
